{"ast":null,"code":"import { applyMiddleware } from 'redux';\nimport { createStore } from 'redux';\nimport { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from '../reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  }\n};\nconst middleware = [thunk];\n\n// const store = configureStore({\n//   reducer,\n//   initialState\n// })\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"names":["applyMiddleware","createStore","configureStore","combineReducers","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","reducer","productList","productDetails","cart","cartItemsFromStorage","localStorage","getItem","JSON","parse","initialState","cartItems","middleware","store"],"sources":["C:/Users/alexa/OneDrive/Desktop/eCommerce Template/frontend/src/store.js"],"sourcesContent":["import { applyMiddleware } from 'redux'\r\nimport { createStore } from 'redux'\r\nimport { configureStore, combineReducers } from '@reduxjs/toolkit'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { productListReducer, productDetailsReducer } from '../reducers/productReducers'\r\nimport { cartReducer } from './reducers/cartReducers'\r\n\r\nconst reducer = combineReducers({\r\n  productList: productListReducer,\r\n  productDetails: productDetailsReducer,\r\n  cart: cartReducer,\r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\r\n\r\nconst initialState = {\r\n  cart: { cartItems: cartItemsFromStorage },\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\n// const store = configureStore({\r\n//   reducer,\r\n//   initialState\r\n// })\r\n\r\nconst store = createStore(\r\n  reducer, \r\n  initialState, \r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nexport default store"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAClE,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,kBAAkB,EAAEC,qBAAqB,QAAQ,6BAA6B;AACvF,SAASC,WAAW,QAAQ,yBAAyB;AAErD,MAAMC,OAAO,GAAGN,eAAe,CAAC;EAC9BO,WAAW,EAAEJ,kBAAkB;EAC/BK,cAAc,EAAEJ,qBAAqB;EACrCK,IAAI,EAAEJ;AACR,CAAC,CAAC;AAEF,MAAMK,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE;AAEnH,MAAMG,YAAY,GAAG;EACnBN,IAAI,EAAE;IAAEO,SAAS,EAAEN;EAAqB;AAC1C,CAAC;AAED,MAAMO,UAAU,GAAG,CAAChB,KAAK,CAAC;;AAE1B;AACA;AACA;AACA;;AAEA,MAAMiB,KAAK,GAAGpB,WAAW,CACvBQ,OAAO,EACPS,YAAY,EACZb,mBAAmB,CAACL,eAAe,CAAC,GAAGoB,UAAU,CAAC,CAAC,CACpD;AAED,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}